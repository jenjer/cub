!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	libft/Makefile	/^AR = ar$/;"	m
BONUSOBJS	libft/Makefile	/^BONUSOBJS = ${BONUSSRCS:.c=.o}$/;"	m
BONUSSRCS	libft/Makefile	/^BONUSSRCS = ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c ft_lstadd_back.c ft_lstdelone.c ft_lstclear.c ft_lstiter.c ft_lstmap.c$/;"	m
BUFFER_SIZE	gnl/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
BUTTON_X	cub3d.h	/^# define BUTTON_X /;"	d
CC	Makefile	/^CC          = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS      = -Wall -Wextra -Werror -o3 -g3 #-fsanitize=address$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CUB2D_H	cub2d.h	/^# define CUB2D_H$/;"	d
CUB3D_H	cub3d.h	/^# define CUB3D_H$/;"	d
ERR_DATA_FILTER	mlx/mlx_png.c	/^#define	ERR_DATA_FILTER	/;"	d	file:
ERR_DATA_MISMATCH	mlx/mlx_png.c	/^#define	ERR_DATA_MISMATCH	/;"	d	file:
ERR_MAGIC_SIZE	mlx/mlx_png.c	/^#define	ERR_MAGIC_SIZE	/;"	d	file:
ERR_MAGIC_WRONG	mlx/mlx_png.c	/^#define	ERR_MAGIC_WRONG	/;"	d	file:
ERR_STRUCT_CRC	mlx/mlx_png.c	/^#define	ERR_STRUCT_CRC	/;"	d	file:
ERR_STRUCT_DAT	mlx/mlx_png.c	/^#define	ERR_STRUCT_DAT	/;"	d	file:
ERR_STRUCT_END	mlx/mlx_png.c	/^#define	ERR_STRUCT_END	/;"	d	file:
ERR_STRUCT_HDR	mlx/mlx_png.c	/^#define	ERR_STRUCT_HDR	/;"	d	file:
ERR_STRUCT_INCIMPL	mlx/mlx_png.c	/^#define	ERR_STRUCT_INCIMPL /;"	d	file:
ERR_STRUCT_INCOMPLETE	mlx/mlx_png.c	/^#define	ERR_STRUCT_INCOMPLETE	/;"	d	file:
ERR_STRUCT_MISSCHK	mlx/mlx_png.c	/^#define	ERR_STRUCT_MISSCHK	/;"	d	file:
ERR_ZLIB	mlx/mlx_png.c	/^#define	ERR_ZLIB	/;"	d	file:
FONT_HEIGHT	mlx/mlx_int.h	/^#define	FONT_HEIGHT	/;"	d
FONT_WIDTH	mlx/mlx_int.h	/^#define FONT_WIDTH	/;"	d
GAME_HEIGHT	cub3d.h	/^# define GAME_HEIGHT /;"	d
GAME_WIDTH	cub3d.h	/^# define GAME_WIDTH /;"	d
GET_NEXT_LINE_H	gnl/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
KEY_A	cub3d.h	/^# define KEY_A /;"	d
KEY_D	cub3d.h	/^# define KEY_D /;"	d
KEY_ESC	cub3d.h	/^# define KEY_ESC /;"	d
KEY_LEFT	cub3d.h	/^# define KEY_LEFT /;"	d
KEY_RIGHT	cub3d.h	/^# define KEY_RIGHT /;"	d
KEY_S	cub3d.h	/^# define KEY_S /;"	d
KEY_W	cub3d.h	/^# define KEY_W /;"	d
LD	cub2d.h	/^# define LD /;"	d
LIBFT	Makefile	/^LIBFT       = libft.a$/;"	m
LIBFTDIR	Makefile	/^LIBFTDIR    = .\/libft$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LU	cub2d.h	/^# define LU /;"	d
MAX_EVENT	mlx/mlx_int.h	/^#define	MAX_EVENT	/;"	d
MAX_PIXEL_NB	mlx/mlx_int.h	/^#define MAX_PIXEL_NB	/;"	d
MLX	Makefile	/^MLX         = -L.\/mlx -lmlx -framework OpenGL -framework AppKit$/;"	m
MLXDIR	Makefile	/^MLXDIR      = .\/mlx$/;"	m
MLX_H	mlx/mlx.h	/^#define	MLX_H$/;"	d
NAME	Makefile	/^NAME        = cub3d$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NOM	mlx/Makefile	/^NOM=libmlx.a$/;"	m
OBJ	mlx/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	mlx/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS = ${SRCS:.c=.o}$/;"	m
OBJS_MAN	Makefile	/^OBJS_MAN    = ${SRCS_MAN:.c=.o}$/;"	m
OPEN_MAX	gnl/get_next_line.h	/^#  define OPEN_MAX /;"	d
PI	cub2d.h	/^# define PI /;"	d
PNG_HDR_SIZE	mlx/mlx_png.c	/^#define PNG_HDR_SIZE	/;"	d	file:
PNG_MAGIC_SIZE	mlx/mlx_png.c	/^#define	PNG_MAGIC_SIZE	/;"	d	file:
RD	cub2d.h	/^# define RD /;"	d
RETURN	mlx/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
RU	cub2d.h	/^# define RU /;"	d
SRC	mlx/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
SRCS	libft/Makefile	/^SRCS = ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c ft_strlen.c ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c ft_strlcpy.c ft_strlcat.c ft_toupper.c ft_tolower.c ft_strchr.c ft_strrchr.c ft_strncmp.c ft_memchr.c ft_memcmp.c ft_strnstr.c ft_atoi.c ft_calloc.c ft_strdup.c ft_substr.c ft_strjoin.c ft_strtrim.c ft_split.c ft_itoa.c ft_strmapi.c ft_striteri.c ft_putchar_fd.c ft_putstr_fd.c ft_putendl_fd.c ft_putnbr_fd.c$/;"	m
SRCS_MAN	Makefile	/^SRCS_MAN    = main.c                    \\$/;"	m
UNIQ_BPP	mlx/mlx_int.h	/^#define UNIQ_BPP	/;"	d
X_EVENT_KEY_PRESS	cub3d.h	/^# define X_EVENT_KEY_PRESS /;"	d
X_EVENT_KEY_RELEASE	cub3d.h	/^# define X_EVENT_KEY_RELEASE /;"	d
Z_CHUNK	mlx/mlx_png.c	/^#define	Z_CHUNK	/;"	d	file:
add_bits	utils2.c	/^void	add_bits(t_color *color)$/;"	f
add_color	map_color.c	/^int	add_color(t_meta_data *meta, char *tmp, int flag)$/;"	f
add_direction	map_direction.c	/^int	add_direction(t_meta_data *meta, char *line)$/;"	f
add_height	cub3d.h	/^	int		add_height;$/;"	m	struct:s_meta_data
all	cub3d.h	/^	int	all;$/;"	m	struct:s_color
appid	mlx/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
blue	cub3d.h	/^	int	blue;$/;"	m	struct:s_color
bpp	cub2d.h	/^	int		bpp;$/;"	m	struct:s_img2
bpp	mlx/mlx_png.c	/^  int		bpp;$/;"	m	struct:png_info_s	file:
buffer	mlx/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	mlx/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon1	file:
c_color	cub3d.h	/^	t_color	*c_color;$/;"	m	struct:s_meta_data
cal_distance	map2_ray.c	/^void	cal_distance(t_press *press, t_dp_ray *hv)$/;"	f
cal_horz_ray	map2_ray.c	/^void	cal_horz_ray(t_press *press, t_dp_ray *horz)$/;"	f
cal_ray	map2_ray.c	/^void	cal_ray(t_press *press, t_dp_ray *hv)$/;"	f
cal_vert_ray	map2_ray.c	/^void	cal_vert_ray(t_press *press, t_dp_ray *vert)$/;"	f
check_direction	map_direction.c	/^int	check_direction(t_meta_data *meta)$/;"	f
check_four_side	map_valid.c	/^int	check_four_side(t_meta_data *meta, int r, int c)$/;"	f
check_wall	map2_player.c	/^int	check_wall(t_press *press, double x, double y) \/\/ update player 함수에서 조정해야함$/;"	f
check_wall_light	map2_ray.c	/^int	check_wall_light(t_press *press, double x, double y)$/;"	f
col	mlx/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	mlx/mlx_png.c	/^  int		color;$/;"	m	struct:png_info_s	file:
color	mlx/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
count_max	libft/ft_strlcpy.c	/^static int	count_max(const char *arr)$/;"	f	file:
count_num_len	libft/ft_itoa.c	/^static int	count_num_len(int n)$/;"	f	file:
counting_word	libft/ft_split.c	/^static size_t	counting_word(char const *s, char c)$/;"	f	file:
cpy	libft/ft_memmove.c	/^static void	cpy(unsigned char *udst, unsigned char *usrc, size_t len)$/;"	f	file:
cpy_string	libft/ft_split.c	/^static char	*cpy_string(char *s, char c)$/;"	f	file:
crc_table	mlx/mlx_png.c	/^unsigned long crc_table[256] = { 0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d };$/;"	v
cut_line	gnl/get_next_line.c	/^char	*cut_line(char *backup)$/;"	f
data	cub2d.h	/^	int		*data;$/;"	m	struct:s_img2
deep_copy_space	map_setting.c	/^void	deep_copy_space(char *sp_map, char *map, int width)$/;"	f
deling	libft/ft_lstmap.c	/^static t_list	*deling(void *content, void (*del)(void *))$/;"	f	file:
depth	mlx/mlx_png.c	/^  int		depth;$/;"	m	struct:png_info_s	file:
dfs1_start	map_valid.c	/^int	dfs1_start(t_meta_data *meta)$/;"	f
display_log	mlx/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
distance	cub2d.h	/^	double	distance;$/;"	m	struct:s_dp_ray
distance	cub2d.h	/^	double	distance;$/;"	m	struct:s_ray2
distance_between_points	map2_ray.c	/^double	distance_between_points(double x1, double y1, double x2, double y2)$/;"	f
do_dfs1	map_valid.c	/^void	do_dfs1(t_meta_data *meta, int r, int c)$/;"	f
down	cub2d.h	/^	int		down;$/;"	m	struct:s_key
draw_line	map2_ray.c	/^void	draw_line(t_press *press, double x1, double y1, double x2, double y2)$/;"	f
draw_one_ray	map2_ray.c	/^void	draw_one_ray(t_press *press, double angle, int ray_num)$/;"	f
draw_player	map2_cast.c	/^int	draw_player(t_press *press)$/;"	f
draw_ray	map2_ray.c	/^void	draw_ray(t_press *press)$/;"	f
east	cub3d.h	/^	char	*east;$/;"	m	struct:s_meta_data
endian	cub2d.h	/^	int		endian;$/;"	m	struct:s_img2
erase_key	map2_press.c	/^void	erase_key(t_press *press)$/;"	f
exit_error	utils.c	/^void	exit_error(char *message, int code)$/;"	f
f_color	cub3d.h	/^	t_color	*f_color;$/;"	m	struct:s_meta_data
fd	cub3d.h	/^	int		fd;$/;"	m	struct:s_meta_data
fill_sp_map	map_setting.c	/^void	fill_sp_map(char *sp_map, int idx)$/;"	f
fill_squares	map2_cast.c	/^void	fill_squares(t_press *press, int x, int y, int color)$/;"	f
font	mlx/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	mlx/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon1	file:
font_fshader	mlx/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	mlx/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	mlx/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
found_wallhit	cub2d.h	/^	int		found_wallhit;$/;"	m	struct:s_dp_ray
free_spl	utils2.c	/^void	free_spl(char **temp)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_compare	utils2.c	/^int	ft_compare(int a, int b)$/;"	f
ft_exit	utils2.c	/^int	ft_exit(char *str)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isnum	utils.c	/^int	ft_isnum(char *str)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_max	utils2.c	/^int	ft_max(int a, int b)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	gnl/get_next_line_utils.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int nb, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char *s, char c)$/;"	f
ft_strchr	gnl/get_next_line_utils.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	gnl/get_next_line_utils.c	/^char	*ft_strdup(char *s1)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	gnl/get_next_line_utils.c	/^char	*ft_strjoin(char *s1, char *s2)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, char *src, size_t dstsize)$/;"	f
ft_strlen	gnl/get_next_line_utils.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrncmp	utils.c	/^int	ft_strrncmp(char *s1, char *s2, int n)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char *s1, char *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
func_t	mlx/mlx_int.h	/^typedef int (*func_t)();$/;"	t
get_next_line	gnl/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
glsl_info_s	mlx/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	mlx/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
green	cub3d.h	/^	int	green;$/;"	m	struct:s_color
height	cub3d.h	/^	int		height;$/;"	m	struct:s_meta_data
height	mlx/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon1	file:
height	mlx/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
height	mlx/mlx_png.c	/^  unsigned int	height;$/;"	m	struct:png_info_s	file:
image_fshader	mlx/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	mlx/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	mlx/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	cub2d.h	/^	void	*img;$/;"	m	struct:s_img2
img	mlx/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img2	cub3d.h	/^	t_img2		*img2;$/;"	m	struct:s_press
img_list	mlx/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	mlx/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
init_color	map_color.c	/^void	init_color(t_color *color)$/;"	f
init_img2	map2_cast_init.c	/^void	init_img2(t_img2 *img2)$/;"	f
init_key2	map2_cast_init.c	/^void	init_key2(t_key *key2)$/;"	f
init_map2	map2_cast_init.c	/^void	init_map2(t_map2 *map2, t_meta_data *meta, t_img2 *img2)$/;"	f
init_meta_data	main.c	/^void	init_meta_data(char *name, t_meta_data *meta)$/;"	f
init_player	map2_cast_init.c	/^void	init_player(t_meta_data *meta, t_player2 **player2)$/;"	f
inserting	libft/ft_split.c	/^static char	**inserting(char **ret, size_t count_word, char *s, char c)$/;"	f	file:
interlace	mlx/mlx_png.c	/^  int		interlace;$/;"	m	struct:png_info_s	file:
is_one_in	map_valid.c	/^int	is_one_in(t_meta_data *meta, int r, int c)$/;"	f
is_ray_facingdown	cub2d.h	/^	int		is_ray_facingdown;$/;"	m	struct:s_ray2
is_ray_facingleft	cub2d.h	/^	int		is_ray_facingleft;$/;"	m	struct:s_ray2
is_ray_facingright	cub2d.h	/^	int		is_ray_facingright;$/;"	m	struct:s_ray2
is_ray_facingup	cub2d.h	/^	int		is_ray_facingup;$/;"	m	struct:s_ray2
key2	cub3d.h	/^	t_key		*key2;$/;"	m	struct:s_press
key_press	map2_press.c	/^int	key_press(int keycode, t_press *press)$/;"	f
leakcheck	main.c	/^void	leakcheck(void)$/;"	f
left	cub2d.h	/^	int		left;$/;"	m	struct:s_key
line_size	cub2d.h	/^	int		line_size;$/;"	m	struct:s_img2
loc_font_atlassize	mlx/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	mlx/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	mlx/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	mlx/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	mlx/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	mlx/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	mlx/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	mlx/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	mlx/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	mlx/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	mlx/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	mlx/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	mlx/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	mlx/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	mlx/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
loop_hook	mlx/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	mlx/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	mlx/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
m_dir	cub2d.h	/^	int		m_dir;$/;"	m	struct:s_map2
magic	mlx/mlx_png.c	/^unsigned char magic[PNG_MAGIC_SIZE] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v
main	main.c	/^int	main(int argc, char **argv)$/;"	f
main_loop_active	mlx/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
make_flag	map_direction.c	/^void	make_flag(char *line, int *flag, char **tmp)$/;"	f
make_line	gnl/get_next_line.c	/^char	*make_line(char *backup, int i)$/;"	f
make_rgb_bit	utils2.c	/^int	make_rgb_bit(t_meta_data *data)$/;"	f
make_sp_map	map_setting.c	/^void	make_sp_map(t_meta_data *meta)$/;"	f
map	cub3d.h	/^	char	**map;$/;"	m	struct:s_meta_data
map2	cub3d.h	/^	t_map2		*map2;$/;"	m	struct:s_press
map_cast	map2_cast.c	/^int	map_cast(t_param *param_, t_meta_data *meta_)$/;"	f
map_cast_init	map2_cast_init.c	/^void	map_cast_init(t_press *press)$/;"	f
map_check_func	map_valid.c	/^int	map_check_func(t_meta_data *meta, int r, int c)$/;"	f
map_cols	cub2d.h	/^	int		map_cols;$/;"	m	struct:s_map2
map_direction_init	map_direction.c	/^int	map_direction_init(t_meta_data *meta)$/;"	f
map_free_all	utils.c	/^int	map_free_all(t_meta_data meta, t_param *param)$/;"	f
map_init	map_setting.c	/^int	map_init(t_meta_data *meta, char **tmp_map, int idx)$/;"	f
map_rows	cub2d.h	/^	int		map_rows;$/;"	m	struct:s_map2
map_valid_check	map_valid.c	/^int	map_valid_check(t_meta_data *meta)$/;"	f
match_color	map_color.c	/^int	match_color(t_color *color, char **rgb)$/;"	f
max_width	cub3d.h	/^	int		max_width;$/;"	m	struct:s_meta_data
meet_eof	gnl/get_next_line.c	/^char	*meet_eof(char **backup, char *buf, int read_size)$/;"	f
meta	cub3d.h	/^	t_meta_data	*meta;$/;"	m	struct:s_press
mipng_crc	mlx/mlx_png.c	/^int	mipng_crc(unsigned char *ptr, int len)$/;"	f
mipng_data	mlx/mlx_png.c	/^int	mipng_data(mlx_img_list_t *img, unsigned char *dat, png_info_t *pi)$/;"	f
mipng_defilter	mlx/mlx_png.c	/^unsigned char (*(mipng_defilter[]))(unsigned char *buff, int pos, int a, int b, int c) =$/;"	v
mipng_defilter_average	mlx/mlx_png.c	/^unsigned char mipng_defilter_average(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_none	mlx/mlx_png.c	/^unsigned char mipng_defilter_none(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_paeth	mlx/mlx_png.c	/^unsigned char mipng_defilter_paeth(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_sub	mlx/mlx_png.c	/^unsigned char mipng_defilter_sub(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_up	mlx/mlx_png.c	/^unsigned char mipng_defilter_up(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_err	mlx/mlx_png.c	/^char *(mipng_err[]) =$/;"	v
mipng_fill_img	mlx/mlx_png.c	/^int	mipng_fill_img(mlx_img_list_t *img, unsigned char *buf, png_info_t *pi)$/;"	f
mipng_is_type	mlx/mlx_png.c	/^int	mipng_is_type(unsigned char *ptr, char *type)$/;"	f
mipng_magic	mlx/mlx_png.c	/^int	mipng_magic(unsigned char *ptr, int size)$/;"	f
mipng_structure	mlx/mlx_png.c	/^int	mipng_structure(unsigned char *ptr, int size, unsigned char **hdr, unsigned char **dat)$/;"	f
mipng_verif_hdr	mlx/mlx_png.c	/^int	mipng_verif_hdr(unsigned char *hdr, png_info_t *pi)$/;"	f
mlx	cub3d.h	/^	void	*mlx;$/;"	m	struct:s_param
mlx_col_name	mlx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	mlx/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	mlx/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	mlx/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	mlx/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	mlx/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	mlx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	mlx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	mlx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_png	mlx/mlx_png.c	/^mlx_img_list_t	*mlx_int_parse_png(mlx_ptr_t *xvar, unsigned char *fptr, int size)$/;"	f
mlx_int_parse_xpm	mlx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_static_line	mlx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	mlx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	mlx/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_png_file_to_image	mlx/mlx_png.c	/^void	*mlx_png_file_to_image(mlx_ptr_t *xvar, char *file, int *width, int *height)$/;"	f
mlx_ptr_s	mlx/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	mlx/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	mlx/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	mlx/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	mlx/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	mlx/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_win_list_s	mlx/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	mlx/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
mts	cub2d.h	/^	int		mts;$/;"	m	struct:s_map2
name	mlx/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	mlx/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	mlx/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	mlx/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	mlx/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	mlx/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
normalize_angle	map2_ray.c	/^double	normalize_angle(double angle)$/;"	f
north	cub3d.h	/^	char	*north;$/;"	m	struct:s_meta_data
num1	cub3d.h	/^	int		num1;$/;"	m	struct:s_meta_data
param	cub3d.h	/^	t_param		*param;$/;"	m	struct:s_press
param_init	map2_cast.c	/^void	param_init(t_press *press)$/;"	f
pixel_data	mlx/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon1	file:
pixel_fshader	mlx/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	mlx/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	mlx/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	mlx/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
player2	cub3d.h	/^	t_player2	*player2;$/;"	m	struct:s_press
player_x	cub3d.h	/^	int		player_x;$/;"	m	struct:s_meta_data
player_y	cub3d.h	/^	int		player_y;$/;"	m	struct:s_meta_data
png_info_s	mlx/mlx_png.c	/^typedef struct png_info_s$/;"	s	file:
png_info_t	mlx/mlx_png.c	/^} png_info_t;$/;"	t	typeref:struct:png_info_s	file:
pos1_c	cub3d.h	/^	int		pos1_c;$/;"	m	struct:s_meta_data
pos1_r	cub3d.h	/^	int		pos1_r;$/;"	m	struct:s_meta_data
print_map	main.c	/^void	print_map(t_meta_data meta)$/;"	f
ray2	cub3d.h	/^	t_ray2		*ray2;$/;"	m	struct:s_press
ray_angle	cub2d.h	/^	double	ray_angle;$/;"	m	struct:s_ray2
ray_init	map2_ray.c	/^void	ray_init(t_ray2 *ray2, double ray_angle)$/;"	f
red	cub3d.h	/^	int	red;$/;"	m	struct:s_color
render_3d_projects_walls	map3_render.c	/^void	render_3d_projects_walls(t_press *press, int ray_num)$/;"	f
render_map	map2_cast.c	/^void	render_map(t_press *press)$/;"	f
reset_image	map2_press.c	/^void	reset_image(t_press *press)$/;"	f
right	cub2d.h	/^	int		right;$/;"	m	struct:s_key
rotation_angle	cub2d.h	/^	double	rotation_angle;$/;"	m	struct:s_player2
s_col_name	mlx/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_color	cub3d.h	/^typedef struct s_color$/;"	s
s_dp_ray	cub2d.h	/^typedef struct s_dp_ray$/;"	s
s_img2	cub2d.h	/^typedef struct s_img2$/;"	s
s_key	cub2d.h	/^typedef struct s_key$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_map2	cub2d.h	/^typedef struct s_map2$/;"	s
s_meta_data	cub3d.h	/^typedef struct s_meta_data$/;"	s
s_param	cub3d.h	/^typedef struct s_param$/;"	s
s_player2	cub2d.h	/^typedef struct s_player2$/;"	s
s_press	cub3d.h	/^typedef struct s_press$/;"	s
s_ray2	cub2d.h	/^typedef struct s_ray2$/;"	s
s_xpm_col	mlx/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
scale	cub2d.h	/^	double	scale;$/;"	m	struct:s_map2
see_flag	map_direction.c	/^int	see_flag(t_meta_data *meta, char *tmp, int flag)$/;"	f
skip_space	utils.c	/^void	skip_space(char **str)$/;"	f
south	cub3d.h	/^	char	*south;$/;"	m	struct:s_meta_data
sp_map	cub3d.h	/^	char	**sp_map;$/;"	m	struct:s_meta_data
start	libft/ft_atoi.c	/^static int	start(const char *str, size_t *i)$/;"	f	file:
str_free	gnl/get_next_line.c	/^void	str_free(char **str)$/;"	f
t_color	cub3d.h	/^}	t_color;$/;"	t	typeref:struct:s_color
t_dp_ray	cub2d.h	/^}	t_dp_ray;$/;"	t	typeref:struct:s_dp_ray
t_img2	cub2d.h	/^}	t_img2;$/;"	t	typeref:struct:s_img2
t_key	cub2d.h	/^}	t_key;$/;"	t	typeref:struct:s_key
t_list	libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_map2	cub2d.h	/^}	t_map2;$/;"	t	typeref:struct:s_map2
t_meta_data	cub3d.h	/^}	t_meta_data;$/;"	t	typeref:struct:s_meta_data
t_param	cub3d.h	/^}	t_param;$/;"	t	typeref:struct:s_param
t_player2	cub2d.h	/^}	t_player2;$/;"	t	typeref:struct:s_player2
t_press	cub3d.h	/^}	t_press;$/;"	t	typeref:struct:s_press
t_ray2	cub2d.h	/^}	t_ray2;$/;"	t	typeref:struct:s_ray2
t_xpm_col	mlx/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
texture	mlx/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
thickness	cub2d.h	/^	int		thickness;$/;"	m	struct:s_player2
tile_size	cub2d.h	/^	int		tile_size;$/;"	m	struct:s_img2
tile_size	cub2d.h	/^	int		tile_size;$/;"	m	struct:s_map2
turn_left	cub2d.h	/^	int		turn_left;$/;"	m	struct:s_key
turn_right	cub2d.h	/^	int		turn_right;$/;"	m	struct:s_key
turnspeed	cub2d.h	/^	double	turnspeed;$/;"	m	struct:s_player2
up	cub2d.h	/^	int		up;$/;"	m	struct:s_key
update_player2	map2_player.c	/^int	update_player2(t_press *press)$/;"	f
valid_char_check	map_valid.c	/^int	valid_char_check(char c)$/;"	f
vbuffer	mlx/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vertexes	mlx/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
visited	cub3d.h	/^	int		**visited;$/;"	m	struct:s_meta_data
walkspeed	cub2d.h	/^	double	walkspeed;$/;"	m	struct:s_player2
wall_hit_x	cub2d.h	/^	double	wall_hit_x;$/;"	m	struct:s_ray2
wall_hit_y	cub2d.h	/^	double	wall_hit_y;$/;"	m	struct:s_ray2
wall_hitx	cub2d.h	/^	double	wall_hitx;$/;"	m	struct:s_dp_ray
wall_hity	cub2d.h	/^	double	wall_hity;$/;"	m	struct:s_dp_ray
was_hit_vertical	cub2d.h	/^	int		was_hit_vertical;$/;"	m	struct:s_ray2
west	cub3d.h	/^	char	*west;$/;"	m	struct:s_meta_data
width	mlx/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon1	file:
width	mlx/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
width	mlx/mlx_png.c	/^  unsigned int	width;$/;"	m	struct:png_info_s	file:
win	cub3d.h	/^	void	*win;$/;"	m	struct:s_param
win_height	cub2d.h	/^	int		win_height;$/;"	m	struct:s_map2
win_list	mlx/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
win_width	cub2d.h	/^	int		win_width;$/;"	m	struct:s_img2
win_width	cub2d.h	/^	int		win_width;$/;"	m	struct:s_map2
winid	mlx/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
x	cub2d.h	/^	double	x;$/;"	m	struct:s_player2
xintercept	cub2d.h	/^	double	xintercept;$/;"	m	struct:s_dp_ray
xstep	cub2d.h	/^	double	xstep;$/;"	m	struct:s_dp_ray
y	cub2d.h	/^	double	y;$/;"	m	struct:s_player2
yintercept	cub2d.h	/^	double	yintercept;$/;"	m	struct:s_dp_ray
ystep	cub2d.h	/^	double	ystep;$/;"	m	struct:s_dp_ray
